@model TeamListViewModel


<form>
    <input type="datetime-local" value="@DateTimeOffset.Now.ToString("yyyy-MM-ddThh:mm")" />
</form>
<div style="display:flex;flex-wrap:wrap;">
    @foreach (var team in Model.Teams)
    {
        <div data-team-id="@team.TeamId">
            @foreach (var student in team.StudentList)
            {
                <p>@student.Name</p>
            }
        </div>
    }
</div>
<form asp-route="TeamListPost">
    <select name="activityId">
        <optgroup label="Tipo de Actividad">
            @foreach (var activity in Model.Activities)
            {
                <option value="@activity.ActivityId">@activity.Name</option>
            }
        </optgroup>
    </select>
    <button type="submit">Agregar Actividad</button>
    <button type="reset">Cancelar</button>
</form>
@* Need to specify route parameter manually due to the taghelper can't recognize a route parameter when routeName is different than current view name*@
<form asp-route="TeamDetailsPost" asp-route-groupId="@ViewBag.groupId" data-team-details> 
    <table data-team-details>
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Asistencia</th>
                @foreach (var activity in Model.ActivitiesAssigned.Select(aa => aa.Activity).Distinct())
                {
                    <th>
                        <p>@activity.Name</p>
                        @if (activity.Type == ActivityType.Grade)
                        {
                            <input type="number" min="0" max="10" step=".1" data-activity-global-grade="@activity.ActivityId"/>
                        }
                    </th>
                }
            </tr>
        </thead>
        @foreach (var student in Model.Teams.SelectMany(t => t.StudentList))
        {
            <tbody data-student-team-id="@student.TeamId" data-student-id="@student.StudentId">
                <tr>
                    <td>@student.Name</td>
                </tr>
                <tr>
                    <td>
                        @{
                            var studentClassDayForStudent = Model.StudentClassDayList.Where(scd => scd.StudentId == student.StudentId).FirstOrDefault();
                        }
                        <label for="student-@student.StudentId-assistence">Asistencia</label>
                        <input id="student-@student.StudentId-assistence" name="assistance" type="checkbox" @(studentClassDayForStudent?.Assistance == true ? "checked" : "") />
                        <input type="hidden" value="@studentClassDayForStudent?.StudentClassDayId" name="studentClassDayId" />
                    </td>
                </tr>
                @foreach (var activityAssigned in Model.ActivitiesAssigned.Where(aa => aa.StudentId == student.StudentId))
                {
                    <tr data-activity-assignment-id="@activityAssigned.ActivityAssignmentId">
                        <td>
                            @if (activityAssigned.Activity.Type == ActivityType.Grade)
                            {
                                <input type="number" min="0" max="10" step="0.1" value="@activityAssigned.Grade" name="type" data-activity-grade="@activityAssigned.Activity.ActivityId"/>
                            }
                            else
                            {
                                <input type="checkbox" value="@activityAssigned.Completed" name="@activityAssigned.Activity.Type"/>
                            }
                            <input type="hidden" value="@activityAssigned.ActivityId" name="activityId" />
                        </td>
                    </tr>
                }
            </tbody>
        }
    </table>

    <div>
        <p>Nombre</p>
        <p>Asistance</p>
        @* dynamic *@

    </div>

    <button type="submit">Guardar cambios</button>
</form>
<vc:notes-sidebar group-id="@Model.GroupId" ></vc:notes-sidebar>

@section scripts{ 
<script type="text/javascript">
    document.addEventListener("DOMContentLoaded", () => {
        const teamDetailsForm = document.querySelector("[data-team-details]");
        teamDetailsForm.addEventListener("submit", ev => {
            const submittingForm = ev.target;
            ev.preventDefault();
            const ajaxCall = new XMLHttpRequest();
            ajaxCall.addEventListener("load", () => window.location.reload(true));
            ajaxCall.open("POST", submittingForm.getAttribute("action"));
            ajaxCall.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            ajaxCall.send(JSON.stringify(getPostData(submittingForm)));
        });

        /*Register global grade assigner*/
        const teamDetailsTable = document.querySelector("table[data-team-details]");
        const activityGlobalGradeInputs = teamDetailsTable.querySelectorAll("input[data-activity-global-grade]");

        activityGlobalGradeInputs
            .forEach(ag => ag.addEventListener("change", e => {
                const activityId = e.target.getAttribute("data-activity-global-grade");

                teamDetailsTable
                    .querySelectorAll(`input[data-activity-grade='${activityId}']`)
                    .forEach(i => i.value = e.target.value);
            }
            ));
        
    });

    const getPostData = (form) => {
        const tbodiesArray = [...form.querySelectorAll("tbody")];
        return tbodiesArray.map(tb => {

            const studentId = Number(tb.getAttribute("data-student-id"));
            const activityAssignmentArray = [...tb.querySelectorAll('[data-activity-assignment-id]')].map(tr => {

                const assignmentTypeInput = tr.querySelector('input[name="type"]');
                const isNumberInput = assignmentTypeInput.type === "number";
                const assignmenType = isNumberInput ? "grade" : "completed";
                const assignmentValue = isNumberInput ? Number(assignmentTypeInput.value) : assignmentTypeInput.checked;

                const activityAssignment = {
                    activityAssignmentId: Number(tr.getAttribute("data-activity-assignment-id")),
                    studentId: studentId,
                    activityId: Number(tr.querySelector('input[name="activityId"]').value)
                };

                activityAssignment[assignmenType] = assignmentValue;

                return activityAssignment;
            });

            return {
                studentClassDay: {
                    studentClassDayId: Number(tb.querySelector('[name="studentClassDayId"]').value),
                    assistance: tb.querySelector('[name="assistance"]').checked,
                    studentId: studentId
                },
                activityAssignments: activityAssignmentArray

            };
        });
    }
</script>
}
